@use "sass:string";
@use "sass:meta";
@use "sass:list";
@use "sass:math";
@use "sass:map";

/*
 * Coerces a SCSS variable to a number so we can use it in math operations.
 * The unit of the SCSS variable will be lost.
 *
 * https://stackoverflow.com/questions/47630616/scss-arithmetic-operation-with-string
 */
@function to-number($value) {
  @if (meta.type-of($value) == "number") {
    @return $value;
  } @else if (meta.type-of($value) != "string") {
    @error "Value for `to-number` should be a number or a string.";
  }

  $result: 0;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == "-";
  $numbers: ("0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9);

  @for $i from if($minus, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);

    @if (list.index(map.keys($numbers), $character) or $character == ".") {
      @if ($character == ".") {
        $digits: 1;
      } @else if ($digits == 0) {
        $result: $result * 10 + map.get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + math.div(map.get($numbers, $character), $digits);
      }
    }
  }

  @return if($minus, -$result, $result);
}

/*
 * Remove the unit of a length
 *
 * https://css-tricks.com/snippets/sass/strip-unit-function/
 */
@function strip-unit($number) {
  @if (meta.type-of($number) == "number" and not math.is-unitless($number)) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

/**
 * Flattens a SCSS map that has nested maps. Nested keys are concatenated with a "-".
 * You can pass a map with multiple nesting levels.
 *
 * @example:
 *
 * $nested-map: (
 *    "blue": (
 *        "100": #F00,
 *        "200": #FF0,
 *        "300": #FFF,
 *    ),
 *
 *    "red": (
 *        "100": #F00,
 *        "200": #FF0,
 *        "300": #FFF,
 *    ),
 * );
 *
 * $flatten-map: flat-map($nested-map);
 *
 * Produces the following:
 *
 * $flatten-map: (
 *    "blue-100": #F00,
 *    "blue-200": #FF0,
 *    "blue-300": #FFF,
 *    "red-100": #F00,
 *    "red-200": #FF0,
 *    "red-300": #FFF,
 * );
 */
@function flat-map($map: (), $parent-key: "") {
  $_result: ();

  @each $key, $value in $map {
    $_key: if(string.length($parent-key) != 0, $parent-key + "-" + $key, $key);

    @if (meta.type-of($value) == "map") {
      $_result: map.merge(flat-map($value, $_key), $_result);
    } @else {
      $_result: map.merge(($_key: $value), $_result);
    }
  }

  @return $_result;
}
